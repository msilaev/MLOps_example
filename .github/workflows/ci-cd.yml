name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  id-token: write # Reequired for requesting the jwt token
  contents: read

jobs:
  integration:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:19.03.12
        options: --privileged
        ports:
          - 5000:5000
          - 5001:5001

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      MLFLOW_DB_USER: ${{ secrets.MLFLOW_DB_USER }}
      MLFLOW_DB_PASSWORD: ${{ secrets.MLFLOW_DB_PASSWORD }}
      MLFLOW_TRACKING_URI: http://localhost:5000

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt


      - name: Configure DVC remote
        run: |
          dvc remote add -d myremote s3://example1917/dvc_remote
          dvc remote modify myremote access_key_id $AWS_ACCESS_KEY_ID
          dvc remote modify myremote secret_access_key $AWS_SECRET_ACCESS_KEY

  build:
    runs-on: ubuntu-latest
    needs: integration

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Upgrade AWS CLI version
        run: |
          aws --version
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
          which aws
          aws --version

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ARN_OICN_ACCESS }}
          role-session-name: Github
          aws-region: eu-north-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          region: eu-north-1

      - name: Create ECR Repositories if they do not exist
        run: |
          aws ecr describe-repositories --repository-names dvc-service || aws ecr create-repository --repository-name dvc-service --region eu-north-1
          aws ecr describe-repositories --repository-names flask-app || aws ecr create-repository --repository-name flask-app --region eu-north-1
          aws ecr describe-repositories --repository-names mlflow-server || aws ecr create-repository --repository-name mlflow-server --region eu-north-1

      - name: Build base image
        run: |
          docker build -f Dockerfile_base -t base_image:latest .

      - name: Build and Push Docker Images with docker-compose
        env:
          IMAGE_TAG: latest
          IMAGE_SHA_TAG: ${{ github.sha }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "Building and pushing Docker images with docker-compose"
          docker-compose -f docker-compose.yml build
          docker tag msilaev/dvc_service $ECR_REGISTRY/dvc-service:$IMAGE_TAG
          docker tag msilaev/dvc_service $ECR_REGISTRY/dvc-service:$IMAGE_SHA_TAG
          docker tag msilaev/flask_app $ECR_REGISTRY/flask-app:$IMAGE_TAG
          docker tag msilaev/flask_app $ECR_REGISTRY/flask-app:$IMAGE_SHA_TAG
          docker tag msilaev/mlflow_server $ECR_REGISTRY/mlflow-server:$IMAGE_TAG
          docker tag msilaev/mlflow_server $ECR_REGISTRY/mlflow-server:$IMAGE_SHA_TAG
          docker push $ECR_REGISTRY/dvc-service:$IMAGE_TAG
          docker push $ECR_REGISTRY/dvc-service:$IMAGE_SHA_TAG
          docker push $ECR_REGISTRY/flask-app:$IMAGE_TAG
          docker push $ECR_REGISTRY/flask-app:$IMAGE_SHA_TAG
          docker push $ECR_REGISTRY/mlflow-server:$IMAGE_TAG
          docker push $ECR_REGISTRY/mlflow-server:$IMAGE_SHA_TAG

  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Upgrade AWS CLI version
        run: |
          aws --version
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
          which aws
          aws --version

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ARN_OICN_ACCESS }}
          role-session-name: Github
          aws-region: eu-north-1

      - name: Deploy to EC2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_SHA_TAG: ${{ github.sha }}
          EC2_USER: ec2-user
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_KEY: ${{ secrets.EC2_KEY }}
        run: |
          echo "${{ secrets.EC2_KEY }}" > ec2-key.pem
          chmod 400 ec2-key.pem
          scp -i ec2-key.pem docker-compose.yml $EC2_USER@$EC2_HOST:~/docker-compose.yml
          ssh -i ec2-key.pem $EC2_USER@$EC2_HOST << 'EOF'
            export ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
            export IMAGE_SHA_TAG=${{ github.sha }}
            docker-compose -f docker-compose.yml pull
            docker-compose -f docker-compose.yml up -d
          EOF
